http://www.stsci.edu/hst/nicmos/tools/conversion_form.html

https://astroquery.readthedocs.io/en/latest/mast/mast.html#hubble-source-catalog-hsc-specific-queries

https://docs.scipy.org/doc/numpy/reference/routines.dual.html#fft

https://en.wikipedia.org/wiki/Matrix_chain_multiplication

https://ssb.stsci.edu/releases/hstdp/2018.1/hstdp-2018.1-osx-py35.final.txt

https://stellarium-web.org/skysource/Betelgeuse?fov=9.7182&date=2020-03-16T05:07:42Z&lat=34.03&lng=-118.45&elev=0

https://www.youtube.com/channel/UC7_gcs09iThXybpVgjHZ_7g


Betelgeuse
Red supergiant star
Also known as α Ori58 Ori α OriHD 39801HR 2061SAO 113271HIP 27989

Magnitude
0.50
Distance
497.95 light years
Spectral Type
M1-M2Ia-Iab

Ra/Dec
05h 56m14.9s   +07°24'27.0"

Az/Alt
246°42'11.2"   +41°50'19.7"

Visibility
Rise: 12:52    Set: 01:36


φ2 Ori
High proper-motion Star
Also known as40 OriHD 37160HR 1907SAO 112958HIP 26366TYC 701-2047-1BD+09 898
Magnitude
4.22
Distance
117.49 light years
Spectral Type
G9.5IIIbFe-2.5
Ra/Dec
05h 37m59.7s   +09°18'03.1"
Az/Alt
252°41'48.7"   +39°06'51.0"
Visibility
Rise: 12:29    Set: 01:23

K2-76b
K2-75BC
K2-74B
K2-39B
K2-71B
K2-28B
K2-73B
WASP-75B
K2-57B
K2-21BC
K2-61B
K2-59bc
K2-60b
K2-54b
K2-167b
K2-55b
K2-168b
K2-58bcd
K2-170bc
K2-169
K2-171b
K2-172bc
K2-62bc
K2-116b
K2-63b
K2-68b
K2-65b
K2-66b
K2-116b
K2-64b
K2-72bcde
K2-70b
WASP-47bde
2007-OR10
Neptune



SkyCoord DOCSTRING
High-level object providing a flexible interface for celestial coordinate
representation, manipulation, and transformation between systems.

The `SkyCoord` class accepts a wide variety of inputs for initialization. At
a minimum these must provide one or more celestial coordinate values with
unambiguous units.  Inputs may be scalars or lists/tuples/arrays, yielding
scalar or array coordinates (can be checked via ``SkyCoord.isscalar``).
Typically one also specifies the coordinate frame, though this is not
required. The general pattern for spherical representations is::

  SkyCoord(COORD, [FRAME], keyword_args ...)
  SkyCoord(LON, LAT, [FRAME], keyword_args ...)
  SkyCoord(LON, LAT, [DISTANCE], frame=FRAME, unit=UNIT, keyword_args ...)
  SkyCoord([FRAME], <lon_attr>=LON, <lat_attr>=LAT, keyword_args ...)

It is also possible to input coordinate values in other representations
such as cartesian or cylindrical.  In this case one includes the keyword
argument ``representation_type='cartesian'`` (for example) along with data
in ``x``, ``y``, and ``z``.

See also: http://docs.astropy.org/en/stable/coordinates/

Examples
--------
The examples below illustrate common ways of initializing a `SkyCoord`
object.  For a complete description of the allowed syntax see the
full coordinates documentation.  First some imports::

  >>> from astropy.coordinates import SkyCoord  # High-level coordinates
  >>> from astropy.coordinates import ICRS, Galactic, FK4, FK5  # Low-level frames
  >>> from astropy.coordinates import Angle, Latitude, Longitude  # Angles
  >>> import astropy.units as u

The coordinate values and frame specification can now be provided using
positional and keyword arguments::

  >>> c = SkyCoord(10, 20, unit="deg")  # defaults to ICRS frame
  >>> c = SkyCoord([1, 2, 3], [-30, 45, 8], frame="icrs", unit="deg")  # 3 coords

  >>> coords = ["1:12:43.2 +1:12:43", "1 12 43.2 +1 12 43"]
  >>> c = SkyCoord(coords, frame=FK4, unit=(u.deg, u.hourangle), obstime="J1992.21")

  >>> c = SkyCoord("1h12m43.2s +1d12m43s", frame=Galactic)  # Units from string
  >>> c = SkyCoord(frame="galactic", l="1h12m43.2s", b="+1d12m43s")

  >>> ra = Longitude([1, 2, 3], unit=u.deg)  # Could also use Angle
  >>> dec = np.array([4.5, 5.2, 6.3]) * u.deg  # Astropy Quantity
  >>> c = SkyCoord(ra, dec, frame='icrs')
  >>> c = SkyCoord(frame=ICRS, ra=ra, dec=dec, obstime='2001-01-02T12:34:56')

  >>> c = FK4(1 * u.deg, 2 * u.deg)  # Uses defaults for obstime, equinox
  >>> c = SkyCoord(c, obstime='J2010.11', equinox='B1965')  # Override defaults

  >>> c = SkyCoord(w=0, u=1, v=2, unit='kpc', frame='galactic',
  ...              representation_type='cartesian')

  >>> c = SkyCoord([ICRS(ra=1*u.deg, dec=2*u.deg), ICRS(ra=3*u.deg, dec=4*u.deg)])

Velocity components (proper motions or radial velocities) can also be
provided in a similar manner::

  >>> c = SkyCoord(ra=1*u.deg, dec=2*u.deg, radial_velocity=10*u.km/u.s)

  >>> c = SkyCoord(ra=1*u.deg, dec=2*u.deg, pm_ra_cosdec=2*u.mas/u.yr, pm_dec=1*u.mas/u.yr)

As shown, the frame can be a `~astropy.coordinates.BaseCoordinateFrame`
class or the corresponding string alias.  The frame classes that are built in
to astropy are `ICRS`, `FK5`, `FK4`, `FK4NoETerms`, and `Galactic`.
The string aliases are simply lower-case versions of the class name, and
allow for creating a `SkyCoord` object and transforming frames without
explicitly importing the frame classes.

Parameters
----------
frame : `~astropy.coordinates.BaseCoordinateFrame` class or string, optional
    Type of coordinate frame this `SkyCoord` should represent. Defaults to
    to ICRS if not given or given as None.
unit : `~astropy.units.Unit`, string, or tuple of :class:`~astropy.units.Unit` or str, optional
    Units for supplied ``LON`` and ``LAT`` values, respectively.  If
    only one unit is supplied then it applies to both ``LON`` and
    ``LAT``.
obstime : valid `~astropy.time.Time` initializer, optional
    Time(s) of observation.
equinox : valid `~astropy.time.Time` initializer, optional
    Coordinate frame equinox.
representation_type : str or Representation class
    Specifies the representation, e.g. 'spherical', 'cartesian', or
    'cylindrical'.  This affects the positional args and other keyword args
    which must correspond to the given representation.
copy : bool, optional
    If `True` (default), a copy of any coordinate data is made.  This
    argument can only be passed in as a keyword argument.
**keyword_args
    Other keyword arguments as applicable for user-defined coordinate frames.
    Common options include:

    ra, dec : valid `~astropy.coordinates.Angle` initializer, optional
        RA and Dec for frames where ``ra`` and ``dec`` are keys in the
        frame's ``representation_component_names``, including `ICRS`,
        `FK5`, `FK4`, and `FK4NoETerms`.
    pm_ra_cosdec, pm_dec  : `~astropy.units.Quantity`, optional
        Proper motion components, in angle per time units.
    l, b : valid `~astropy.coordinates.Angle` initializer, optional
        Galactic ``l`` and ``b`` for for frames where ``l`` and ``b`` are
        keys in the frame's ``representation_component_names``, including
        the `Galactic` frame.
    pm_l_cosb, pm_b : `~astropy.units.Quantity`, optional
        Proper motion components in the `Galactic` frame, in angle per time
        units.
    x, y, z : float or `~astropy.units.Quantity`, optional
        Cartesian coordinates values
    u, v, w : float or `~astropy.units.Quantity`, optional
        Cartesian coordinates values for the Galactic frame.
    radial_velocity : `~astropy.units.Quantity`, optional
        The component of the velocity along the line-of-sight (i.e., the
        radial direction), in velocity units.